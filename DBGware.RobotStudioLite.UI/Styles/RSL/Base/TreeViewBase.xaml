<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:conv="clr-namespace:DBGware.RobotStudioLite.UI.Converters">

    <conv:TreeViewMarginConverter x:Key="LengthConverter" Length="12" />
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        Width="16"
                        Height="16"
                        Background="Transparent">
                        <Path
                            Name="ExpandPath"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="M0.5,0.5 L0.5,6.5 L6.5,0.5 z"
                            Fill="Transparent"
                            SnapsToDevicePixels="True"
                            Stroke="{DynamicResource TreeViewGlyph}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ExpandPath" Property="Fill" Value="{DynamicResource TreeViewGlyph}" />
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource TreeViewGlyph}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="False">
                            <Setter Property="Opacity" Value="0.3" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="False" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                                <Condition Binding="{Binding IsSelectionActive, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ExpandPath" Property="Fill" Value="Transparent" />
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource TreeViewGlyphSelected}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                                <Condition Binding="{Binding IsSelectionActive, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ExpandPath" Property="Fill" Value="{DynamicResource TreeViewGlyphSelected}" />
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource TreeViewGlyphSelected}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                                <Condition Binding="{Binding IsSelectionActive, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ExpandPath" Property="Fill" Value="{DynamicResource TreeViewGlyphSelected}" />
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource TreeViewGlyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource TreeViewGlyphMouseOver}" />
                            <Setter TargetName="ExpandPath" Property="Fill" Value="Transparent" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource TreeViewGlyphMouseOver}" />
                            <Setter TargetName="ExpandPath" Property="Fill" Value="{DynamicResource TreeViewGlyphMouseOver}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                                <Condition Binding="{Binding IsSelectionActive, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource TreeViewGlyphSelected}" />
                            <Setter TargetName="ExpandPath" Property="Fill" Value="Transparent" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="False" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                                <Condition Binding="{Binding IsSelectionActive, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ExpandPath" Property="Fill" Value="{DynamicResource TreeViewGlyphSelected}" />
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource TreeViewGlyphSelected}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                                <Condition Binding="{Binding IsSelectionActive, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource TreeViewGlyphMouseOver}" />
                            <Setter TargetName="ExpandPath" Property="Fill" Value="{DynamicResource TreeViewGlyphMouseOver}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewItemBaseStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="Foreground" Value="{DynamicResource TreeViewForeground}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <StackPanel>
                        <Border
                            MinHeight="{TemplateBinding MinHeight}"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Grid
                                Margin="{Binding Converter={StaticResource LengthConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                VerticalAlignment="Stretch"
                                Background="Transparent">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton
                                    x:Name="Expander"
                                    Grid.Column="0"
                                    Margin="0,1,0,0"
                                    ClickMode="Press"
                                    IsChecked="{Binding Path=IsExpanded, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}"
                                    Style="{DynamicResource ExpandCollapseToggleStyle}" />
                                <ContentPresenter
                                    x:Name="PART_Header"
                                    Grid.Column="1"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    ContentSource="Header"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource TreeViewItemMouseOverBackground}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource TreeViewItemMouseOverBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TreeViewItemMouseOverForeground}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource TreeViewItemSelectedBackground}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource TreeViewItemSelectedBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TreeViewItemSelectedForeground}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsSelectionActive" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ListBoxItemSelectedInactiveBackground}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ListBoxItemSelectedInactiveBorder}" />
                            <Setter Property="Foreground" Value="{DynamicResource ListBoxItemSelectedInactiveForeground}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource SystemColorsGrayText}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TreeViewBaseStyle" TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource TreeViewBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TreeViewBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource TreeViewForeground}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border
                        x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer
                            x:Name="_tv_scrollviewer_"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            CanContentScroll="False"
                            Focusable="False"
                            HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource SystemColorsControl}" />
                        </Trigger>
                        <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
                            <Setter TargetName="_tv_scrollviewer_" Property="CanContentScroll" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>